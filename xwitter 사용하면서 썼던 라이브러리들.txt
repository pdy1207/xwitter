

xwitter 사용하면서 썼던 라이브러리들

npm create vite@latest

react + ty/src

npm i react-router-dom@6.14.2

npm i styled-reset

npm i styled-components@6.0.7

npm i @types/styled-components -D

npm install firebase@10.1.0
- > 프로젝트 등록을 하고 코드 가져온것

빌드용 
npm install -g firebase-tools
-- 


firebase 

기본적으로 firebase SDK 와 server다 
필요한 쿠키 토큰 등등 
로그인 했는지 여부와 시간이 좀 필요하다 

처음에는 모든게 다 비활성화 되어있다 왜? 정신없으니까 그러므로 하나하나씩 활성화를 해줘야 한다.
1. Authentication 로그인 구현
2. 변수를 배출하고 해당 함수에 여러가지 로그인기능 함수 등이 있다 이러한 점으로서 로그인 구현이 쉽게 가능하다 
해당 파베의인증기능은 계정 비활성화 암호 재설정 계정삭제 등 도 가능하다.


많은 플렛폼 추가가 가능하다 

웹을 추가했고 모든게 가능한 api키 또한 만들었다 
자동으로 활성화가 되는게 아닌 활성화를 하고 auth 로서 코드 작성 
await하는 

로그인 유무 form으로서 이메일 가져오고 해당 파베에서 가져온 auth 인스턴스와 이메일 비밀번호가져와서 로그인 


사용자가 생성된후에는 사용자의 정보를 가져와야했다. 그런다음 업데이트를 해야하고표시될 이름 아바타 url 설정 등 해야했음 

계정이 생성되면 사용자 가입

auth는 파이어베이스에서 가져온 전부였다 해당 함수가제일중요!

github버튼을통해 로그인 하도록함 이를 활성화하려면 github 애플리케이션 제작 client id 시크릿키 링크복사 form에 넣음 

provider 만들고 팝업이나리다이렉트가 가능함 
Twiiter 등 다 가능!! 
OAth로서 로그인 가능하다!



깃허브 소셜로그인 은 정말 쉽다 
일단 구현하기 너무 쉬움 데이터 권한 승인 프로세스 너무많이 요청안해도됨!

- https://github.com/settings/developers
이게 바로 OAuth 로그인 구현!

항상 파이어베이스에서 어떤 설정을 했으면 그 설정을 기반으로 코드를 작성하면 된다!

정말 다 가져다 사용하면 된다 ... 

이메일 재설정도 가능하다! 근데 해당 이메일로 보내진다



-- 아이콘 : https://heroicons.com/



클라우드 파이어 스토어  DB입출력 - 파베는 NoSQL이다 

해당 프로젝트의 DB는 테스트 모드 즉 30일 이후에는 비활성화가 된다. - 보안상 위험

그다음 빌드의 Storage 또한 테스트 모드 

MongoDB와 유사한 파이어베이스 또한 collection 이 있고 document가 있다!

스토리지 또한 별 다를건 없다 동일한 구조!


=== 

DB 및 쿼리와 실시간 연결을 생성


firebase에서 트윗을 삭제하려면 doc함수를 사용하여 db에서 해당 tweet을 찾고, deleteDoc함수에 입력해주어야 한다
doc함수의 인자: db, document 이름, id


트윗에 사진이 포함되어 있다면, 사진도 별도로 삭제하는 작업이 필요하다.

사진의 저장 경로를 tweetId와 userId로 구성했다면, 삭제할 때도 해당 값들을 통해 쉽게 찾을 수 있다

.ref함수를 사용하여 저장소에서 이미지 파일의 참조를 얻고, deleteObject함수에 입력해주면 된다.

ref함수의 인자: 저장소, 파일 경로


===


유저 이미지를 동일한 유저 id로 저장해서 유저 id로 이미지를 찾아서 교체해주면 되는 것

tweet의 사진에 사용했던 방식과 같은방식으로userProfile을 업로드합니다.
ref를 사용하여 파일의 저장위치를 선택하고
uploadByBytes를 사용하여 storage에 저장한 후
getDownloadURL을 통해 받은 url을 이미지 태그의 src에 넣음으로써 화면에 사진을 보여줍니다.

이때 bucket은 tweet과 다른걸 사용하고,
모든 파일이 한 경로에 덮어씌어지게 하는게 좋습니다.
- 유저의 profile이랑 tweet의 이미지는 다르고.
유저의 지난 profile 을 굳이 모아줄 필요는 없기때문입니다.


==


사용자의 tweets만 가져오는 query 만들기

firebase가 제공하는 query의 where 옵션을 사용하여
읽어올 데이터를 필터링 할 수있습니다.

where에는 3개의 인자가 필요하며, 1번은 doc의 field, 2번은 연산자 3번은 우리가 원하는 조건을 넣으면됩니다.

다양한 옵션으로 필터랑하여 데이터를 가져올 수있습니다.

데이터를 필터링하거나 다양한 정렬옵션을 주고싶다면,firestore에게 미리 해당 정보를 주어야합니다.
쿼리를 날린 후 브라우저의 콘솔에서 설정창링크를 확인할 수있습니다.


==
